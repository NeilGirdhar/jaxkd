[project]
name = "jaxkd"
dynamic = ["version"]
authors = [
    {name="Benjamin Dodge", email="bendodge@stanford.edu"}
]
description = "Minimal JAX implementation of k-nearest neighbors using a k-d tree."
readme = "README.md"
license = "MIT"
dependencies = ["jax"]
requires-python = ">= 3.10"

[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "ruff>=0.9.5",
]
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[project.urls]
repository = "https://github.com/dodgebc/jaxkd"

[tool.ruff]
line-length = 100

[tool.ruff.lint]
preview = true
select = ["ALL", "D202"]
ignore = [
  "ANN401", # Dynamically typed expressions (Any).
  "ARG001", # Unused function argument.
  "ARG002", # Unused method argument.
  "ARG003", # Unused class method argument.
  "ARG004", # Unused static method argument.
  "B011", # Do not assert false.
  "C901", # Complex structure.
  "COM812", # Trailing comma missing.
  "CPY001", # Missing copyright.
  "D100", # Missing docstring in public module.
  "D101", # Missing docstring in public class.
  "D102", # Missing docstring in public method.
  "D103", # Missing docstring in public function.
  "D105", # Missing docstring in magic method.
  "D107", # Missing docstring in __init__.
  "D211",
  "D212",
  "D413",
  "DOC201", # return is not documented in docstring.
  "DOC202", # Docstring should not have a returns section because the function doesn"t return anything.
  "DOC402", # DOC402 `yield` is not documented in docstring.
  "DOC501", # Raised exception `ValueError` missing from docstring.
  "ERA001", # Commented-out code.
  "F722", # Syntax error in forward annotation.
  "FBT003", # Boolean positional value in function call.
  "FIX002", # Line contains TODO, consider resolving the issue.
  "G004", # Logging statement uses f-string.
  "I001", # Import block is un-sorted or un-formatted.
  "PD008", # Use .loc instead of .at. If speed is important, use NumPy.
  "PD013", # `.melt` is preferred to `.stack`; provides same functionality
  "PGH003", # Use specific rule codes when ignoring type issues.
  "PLR0913", # Too many arguments in function definition.
  "PLR6301", # Method doesn"t use self.
  "PT013", # Found incorrect import of pytest, use simple import pytest instead.
  "Q000", # Single quotes found but double quotes preferred.
  "RUF021", # Parenthesize `a and b` expressions when chaining `and` and `or` together...
  "S101", # Assert used.
  "TC001", # Move application import into a type-checking block.
  "TC002", # Move third-party import into a type-checking block.
  "TC003", # Move standard library import into a type-checking block.
  "TD002", # Missing author in TODO; try: # TODO(<author_name>): ....
  "TD003", # Missing issue link on the line following this TODO.
  "TID252", # Relative imports from parent modules are banned.
  "UP037", # Remove quotes from type annotation.
]
